AWSTemplateFormatVersion: 2010-09-09

Description: >-
  AWS CloudFormation ASG Template

# HealthCheck sur /wp-login.php

Parameters:

  StackName:
    Description: "Stack Name"
    Type: "String"

  VpcId:
    Description: "VPC ID"
    Type: "String"

  AmiIdentifier:
    Type: String
    Description: The AMI identifier to deploy.
    Default: "ami-06dc7d6a46770a86d"

  InstanceType:
    Type: String
    Description: The Instance type.
    Default: "t2.micro"

  PublicSubnetAId:
    Description: The subnet ID of PublicSubnetA
    Type: "String"
  
  PublicSubnetBId:
    Description: The subnet ID of PublicSubnetB
    Type: "String"

  PublicSubnetCId:
    Description: The subnet ID of PublicSubnetC
    Type: "String"

  SecurityGroupWebServerSSHId:
    Description: "The security group ID to use for SSH"
    Type: "String"

  SecurityGroupWebServerHTTPId:
    Description: "The security group ID to use for HTTP"
    Type: "String"

  EC2SNSTopic:
    Description: "EC2 SNS Topic ARN"
    Type: "String"

  IAMSecretsARN:
    Description: "IAM Secrets ARN"
    Type: "String"

  AppDBSecretsARN:
    Description: "App DB Secrets ARN"
    Type: "String"  

  S3BackupARN:
    Description: "S3 Backup ARN"
    Type: "String"
    Default: "arn:aws:s3:::anteverse-backup"

  Toggle:
    Description: "Allow trigger ASG Update"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'

  GithubRepoUrl:
    Type: String
    Description: Github Repo Url
    Default: "https://github.com/hgalvani/docker-nginx-wordpress-mysql.git"
  
  GithubRepoDir:
    Type: String
    Description: Github Repo Dir
    Default: "/mnt/efs/docker-nginx-wordpress-mysql"

  Env:
    Type: String
    Description: Environement
    Default: "prod"  

  PublicIP:
    Description: "My Own Public IP"
    Type: "String"
    Default: '0.0.0.0/0'

  DBInstanceEndpoint:
    Description: "DBInstance Endpoint"
    Type: "String"
  
  FileSystemResourceId:
    Description: "The File System Resource Id"
    Type: "String"

  

Resources:

  WebSiteInstanceRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  
  WebSitePolicyGetSecretsValues: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "GetSecretsValuesPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action:
            - 'secretsmanager:GetSecretValue'
            - 'secretsmanager:DescribeSecret'
            - 'secretsmanager:ListSecretVersionIds'
            Resource:
              - Ref: IAMSecretsARN
              - Ref: AppDBSecretsARN
      Roles: 
        - 
          Ref: "WebSiteInstanceRole"
          

  WebSitePolicyAccsessS3Backup: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "AccsessS3BackupPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:ListBucket'
            - 's3:DeleteObject'
            - 's3:PutObjectAcl'
            - 's3:GetObjectAcl'
            Resource:
                -  Fn::Join:
                    - ''
                    - - 'arn:aws:s3:::'
                      - Ref: S3BackupARN
                -  Fn::Join:
                    - ''
                    - - 'arn:aws:s3:::'
                      - Ref: S3BackupARN
                      - /*  
      Roles: 
        - 
          Ref: "WebSiteInstanceRole"

  # WebSitePolicyAccsessEFSFileSystem: 
  #   Type: "AWS::IAM::Policy"
  #   Properties: 
  #     PolicyName: "AccsessEFSFileSystemPolicy"
  #     PolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - 
  #           Effect: "Allow"
  #           Action:
  #           - 'elasticfilesystem:ClientMount'
  #           - 'elasticfilesystem:ClientWrite'
  #           Resource:
  #             - Ref: AccessPointResourceARN
  #     Roles: 
  #       - 
  #         Ref: "WebSiteInstanceRole"        

  WebSiteInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WebSiteInstanceRole

  WebsiteLaunchConfig:
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT12M5S
        WaitOnResourceSignals: true
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        Ref: AmiIdentifier
      InstanceType:
        Ref: InstanceType
      KeyName:
          Fn::Sub: "${StackName}_keypair"
      SecurityGroups:
        - Ref: SecurityGroupWebServerSSHId
        - Ref: SecurityGroupWebServerHTTPId
      IamInstanceProfile:
        Ref: WebSiteInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo mkdir -p /mnt/efs
          sudo mount -t efs -o tls ${FileSystemResourceId}:/ /mnt/efs
          sudo chmod go+rw /mnt/efs
          sudo git clone ${GithubRepoUrl} ${GithubRepoDir}
          sudo mkdir -p ${GithubRepoDir}/${Env}
          echo "PROJECT_NAME=anteverse" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "MYSQL_HOST=${DBInstanceEndpoint}" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "MYSQL_PORT=3306" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "MYSQL_DBNAME=anteverse" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "MYSQL_USER=$(aws secretsmanager get-secret-value --secret-id AppDBSecrets | jq --raw-output .SecretString | jq -r ."username")" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "MYSQL_PASSWORD=$(aws secretsmanager get-secret-value --secret-id AppDBSecrets| jq --raw-output .SecretString | jq -r ."password")" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "NGINX_PORT=80" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "NGINX_ALLOWED_IP_FOR_ADMIN=${PublicIP}" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "AWS_ACCESS_KEY_ID=$(aws secretsmanager get-secret-value --secret-id anteverse-iam-secret | jq --raw-output .SecretString | jq -r ."aws_access_key_id")" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          echo "AWS_SECRET_ACCESS_KEY=$(aws secretsmanager get-secret-value --secret-id anteverse-iam-secret | jq --raw-output .SecretString | jq -r ."aws_secret_access_key")" | sudo tee -a ${GithubRepoDir}/${Env}/.env
          /usr/local/bin/docker-compose -f ${GithubRepoDir}/${Env}/docker-compose.yml up -d 
          
    
  WebsiteScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: WebsiteLaunchConfig
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - Ref: PublicSubnetAId
        - Ref: PublicSubnetBId
        - Ref: PublicSubnetCId
      DesiredCapacity: 1
      MaxSize: 1
      MinSize: 1
      TargetGroupARNs:
        - Ref: WebsiteTargetGroup
      NotificationConfigurations:
      - TopicARN:
          Ref: EC2SNSTopic
        NotificationTypes: 
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
          - autoscaling:TEST_NOTIFICATION
      Tags:
          -
            Key: Name
            Value:
              Fn::Sub: "${StackName}-frontweb"
            PropagateAtLaunch: true     
      
  ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebsiteScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
        - Ref: ScaleUpPolicy
      AlarmDescription: Scale-up if CPU > 80% for 5 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebsiteScalingGroup
      EvaluationPeriods: '1'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '300'
      Statistic: Average
      Threshold: '80'
    
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
        - Ref: ScaleDownPolicy
      AlarmDescription: Scale-down if CPU < 70% for 5 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebsiteScalingGroup
      EvaluationPeriods: '1'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '300'
      Statistic: Average
      Threshold: '70'

  ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebsiteScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  
  WebsiteTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: VpcId
  
  WebsiteLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - Ref: SecurityGroupWebServerHTTPId
      Subnets:
        - Ref: PublicSubnetAId
        - Ref: PublicSubnetBId
        - Ref: PublicSubnetCId
  
 
  WebsiteLoadBlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn:
        Ref: WebsiteLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebsiteTargetGroup


  # Route53RecordSet:
  #   Condition: AddDNSRecord
  #   Type: 'AWS::Route53::RecordSet'
  #   Properties:
  #     Type: A
  #     Name: !Ref DomainName
  #     AliasTarget:
  #       HostedZoneId: !GetAtt 
  #         - ApplicationLoadBalancer
  #         - CanonicalHostedZoneID
  #       DNSName: !GetAtt 
  #         - ApplicationLoadBalancer
  #         - DNSName
  #     HostedZoneId: !Ref HostedZoneID

# Outputs:
#   AutoScalingGroup:
#     Description: AutoScaling Group Name
#     Export:
#       Name: !Sub '${AWS::StackName}-AutoScalingGroup'
#     Value: !Ref AutoScalingGroup
#   StackName:
#     Description: Stack Name
#     Value: !Ref 'AWS::StackName'
#   URL:
#     Description: The URL of the website
#     Value: !Join 
#       - ''
#       - - 'http://'
#         - !GetAtt 
#           - ElasticLoadBalancer
#           - DNSName